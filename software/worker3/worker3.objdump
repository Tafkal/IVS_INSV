
worker3.elf:     file format elf32-littlenios2
worker3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x14d80020

Program Header:
    LOAD off    0x00001000 vaddr 0x14d80000 paddr 0x14d80000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x14d80020 paddr 0x14d80020 align 2**12
         filesz 0x000010a8 memsz 0x000010a8 flags r-x
    LOAD off    0x000020c8 vaddr 0x14d810c8 paddr 0x14d8110c align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x00002150 vaddr 0x14d81150 paddr 0x14d81150 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  14d80000  14d80000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  14d80020  14d80020  0000210c  2**0
                  CONTENTS
  2 .text         00001090  14d80020  14d80020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  14d810b0  14d810b0  000020b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000044  14d810c8  14d8110c  000020c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  14d81150  14d81150  00002150  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  14d81164  14d81164  0000210c  2**0
                  CONTENTS
  7 .shared_ocm   00000000  20001000  20001000  0000210c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000298  00000000  00000000  00002130  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002588  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000108f  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001219  00000000  00000000  000059df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004fc  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eb3  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000b80  00000000  00000000  00007fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00008b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000130  00000000  00000000  00008b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000a29e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000d  00000000  00000000  0000a2a1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a2ae  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a2af  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000013  00000000  00000000  0000a2b0  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000013  00000000  00000000  0000a2c3  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000013  00000000  00000000  0000a2d6  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  0000a2e9  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000023  00000000  00000000  0000a2ef  2**0
                  CONTENTS, READONLY
 27 .jdi          00015540  00000000  00000000  0000a312  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00103d26  00000000  00000000  0001f852  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
14d80000 l    d  .entry	00000000 .entry
14d80020 l    d  .exceptions	00000000 .exceptions
14d80020 l    d  .text	00000000 .text
14d810b0 l    d  .rodata	00000000 .rodata
14d810c8 l    d  .rwdata	00000000 .rwdata
14d81150 l    d  .bss	00000000 .bss
14d81164 l    d  .sdram	00000000 .sdram
20001000 l    d  .shared_ocm	00000000 .shared_ocm
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../worker3_bsp//obj/HAL/src/crt0.o
14d80068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ringbuf.c
14d810d8 l     O .rwdata	00000004 shared_buffer
00000000 l    df *ABS*	00000000 worker3.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
14d810c8 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
14d809d0 g     F .text	0000002c alt_main
14d80aa4 g     F .text	0000001c altera_avalon_fifo_write_almostfull
14d8110c g       *ABS*	00000000 __flash_rwdata_start
14d801e4 g     F .text	00000120 ringbuf_dequeue
14d80adc g     F .text	00000098 altera_avalon_fifo_init
14d810e8 g     O .rwdata	00000004 c_y
14d80b74 g     F .text	0000001c altera_avalon_fifo_write_fifo
14d80c74 g     F .text	00000028 altera_avalon_mutex_trylock
14d80e70 g     F .text	00000008 altera_nios2_gen2_irq_init
14d80000 g     F .entry	0000001c __reset
14d80bf8 g     F .text	00000008 altera_avalon_fifo_read_backpressure
14d80cbc g     F .text	00000028 altera_avalon_mutex_is_mine
14d80020 g       *ABS*	00000000 __flash_exceptions_start
14d81160 g     O .bss	00000004 errno
14d81158 g     O .bss	00000004 alt_argv
14d890d8 g       *ABS*	00000000 _gp
14d809fc g     F .text	00000004 usleep
14d8006c g     F .text	00000074 ringbuf_init
14d80a6c g     F .text	0000001c altera_avalon_fifo_clear_event
14d800e0 g     F .text	00000104 ringbuf_enqueue
14d80df0 g     F .text	00000074 alt_find_dev
14d80ff4 g     F .text	00000064 .hidden __udivsi3
14d810ec g     O .rwdata	00000004 matrix1
14d80e78 g     F .text	00000038 alt_icache_flush
14d80ce4 g     F .text	00000010 altera_avalon_mutex_first_lock
14d81164 g       *ABS*	00000000 __bss_end
14d80c00 g     F .text	0000004c altera_avalon_mutex_open
14d80d6c g     F .text	00000018 alt_dcache_flush_all
14d80a88 g     F .text	0000001c altera_avalon_fifo_write_ienable
14d8110c g       *ABS*	00000000 __ram_rwdata_end
14d80a50 g     F .text	00000008 altera_avalon_fifo_read_almostempty
14d81100 g     O .rwdata	00000008 alt_mutex_list
14d810c8 g       *ABS*	00000000 __ram_rodata_end
14d81058 g     F .text	00000058 .hidden __umodsi3
14d81150 g     O .bss	00000004 mutex
14d81164 g       *ABS*	00000000 end
14d80a58 g     F .text	0000000c altera_avalon_fifo_read_event
15200000 g       *ABS*	00000000 __alt_stack_pointer
14d80bb8 g     F .text	0000001c altera_avalon_fifo_read_fifo
14d80020 g     F .text	0000004c _start
14d80a20 g     F .text	00000010 alt_sys_init
14d80c9c g     F .text	00000020 altera_avalon_mutex_unlock
14d810c8 g       *ABS*	00000000 __ram_rwdata_start
14d810b0 g       *ABS*	00000000 __ram_rodata_start
14d80cf4 g     F .text	00000078 alt_busy_sleep
14d80eb0 g     F .text	00000030 memcmp
14d81164 g       *ABS*	00000000 __alt_stack_base
14d80a30 g     F .text	0000000c altera_avalon_fifo_read_status
14d80bf0 g     F .text	00000008 altera_avalon_fifo_read_other_info
14d80d84 g     F .text	0000006c alt_dev_llist_insert
14d81150 g       *ABS*	00000000 __bss_start
14d8035c g     F .text	00000594 main
14d81154 g     O .bss	00000004 alt_envp
14d80a64 g     F .text	00000008 altera_avalon_fifo_read_level
20001000 g       *ABS*	00000000 __alt_mem_shared_ocm
14d80c50 g     F .text	00000024 altera_avalon_mutex_lock
14d81108 g     O .rwdata	00000004 alt_errno
14d810f8 g     O .rwdata	00000004 heat_srcs
14d80efc g     F .text	00000084 .hidden __divsi3
14d810b0 g       *ABS*	00000000 __flash_rodata_start
14d810f4 g     O .rwdata	00000004 nr_heat_src
14d810fc g     O .rwdata	00000004 workers_jtag_uart_3
14d80a00 g     F .text	00000020 alt_irq_init
14d8115c g     O .bss	00000004 alt_argc
14d810e4 g     O .rwdata	00000004 c_x
14d80020 g       *ABS*	00000000 __ram_exceptions_start
14d80bd4 g     F .text	0000001c altera_avalon_fifo_write_other_info
14d8110c g       *ABS*	00000000 _edata
14d81164 g       *ABS*	00000000 _end
14d80020 g       *ABS*	00000000 __ram_exceptions_end
14d80304 g     F .text	00000058 _fp_mult
14d80f80 g     F .text	00000074 .hidden __modsi3
14d80a3c g     F .text	0000000c altera_avalon_fifo_read_ienable
15200000 g       *ABS*	00000000 __alt_data_end
14000000 g       *ABS*	00000000 __alt_mem_sdram
14d8001c g       .entry	00000000 _exit
14d80a48 g     F .text	00000008 altera_avalon_fifo_read_almostfull
14d80ee0 g     F .text	0000001c strlen
14d810f0 g     O .rwdata	00000004 matrix2
14d80b90 g     F .text	00000028 altera_avalon_read_fifo
14d80e64 g     F .text	0000000c alt_icache_flush_all
14d80c4c g     F .text	00000004 altera_avalon_mutex_close
14d80ac0 g     F .text	0000001c altera_avalon_fifo_write_almostempty
14d810e0 g     O .rwdata	00000004 height
14d810dc g     O .rwdata	00000004 width
14d808f0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

14d80000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
14d80000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
14d80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
14d80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
14d8000c:	00bffd16 	blt	zero,r2,14d80004 <__alt_mem_shared_ocm+0xf4d7f004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
14d80010:	00453634 	movhi	at,5336
    ori r1, r1, %lo(_start)
14d80014:	08400814 	ori	at,at,32
    jmp r1
14d80018:	0800683a 	jmp	at

14d8001c <_exit>:
14d8001c:	00000000 	call	10000000 <__alt_mem_sdram-0x4000000>

Disassembly of section .text:

14d80020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
14d80020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
14d80024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
14d80028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
14d8002c:	00bffd16 	blt	zero,r2,14d80024 <__alt_mem_shared_ocm+0xf4d7f024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
14d80030:	06c54834 	movhi	sp,5408
    ori sp, sp, %lo(__alt_stack_pointer)
14d80034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
14d80038:	06853634 	movhi	gp,5336
    ori gp, gp, %lo(_gp)
14d8003c:	d6a43614 	ori	gp,gp,37080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
14d80040:	00853634 	movhi	r2,5336
    ori r2, r2, %lo(__bss_start)
14d80044:	10845414 	ori	r2,r2,4432

    movhi r3, %hi(__bss_end)
14d80048:	00c53634 	movhi	r3,5336
    ori r3, r3, %lo(__bss_end)
14d8004c:	18c45914 	ori	r3,r3,4452

    beq r2, r3, 1f
14d80050:	10c00326 	beq	r2,r3,14d80060 <_start+0x40>

0:
    stw zero, (r2)
14d80054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
14d80058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
14d8005c:	10fffd36 	bltu	r2,r3,14d80054 <__alt_mem_shared_ocm+0xf4d7f054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
14d80060:	4d808f00 	call	14d808f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
14d80064:	4d809d00 	call	14d809d0 <alt_main>

14d80068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
14d80068:	003fff06 	br	14d80068 <__alt_mem_shared_ocm+0xf4d7f068>

14d8006c <ringbuf_init>:
/**
 * @brief Initialize ring buffer
 * @param writer Used to signal if caller writes to buffer or reads from it
 */
void ringbuf_init(uint32_t writer)
{
14d8006c:	defffe04 	addi	sp,sp,-8
14d80070:	df000115 	stw	fp,4(sp)
14d80074:	df000104 	addi	fp,sp,4
14d80078:	e13fff15 	stw	r4,-4(fp)
    if (1 == writer)
14d8007c:	e0bfff17 	ldw	r2,-4(fp)
14d80080:	10800058 	cmpnei	r2,r2,1
14d80084:	1000111e 	bne	r2,zero,14d800cc <ringbuf_init+0x60>
    {
    	shared_buffer->head = RINGBUF_START_ADDR;
14d80088:	00a80034 	movhi	r2,40960
14d8008c:	10841004 	addi	r2,r2,4160
14d80090:	10000015 	stw	zero,0(r2)
    	shared_buffer->tail = RINGBUF_START_ADDR;
14d80094:	00a80034 	movhi	r2,40960
14d80098:	10841004 	addi	r2,r2,4160
14d8009c:	10000115 	stw	zero,4(r2)
    	shared_buffer->end = RINGBUF_END_ADDR;
14d800a0:	00a80034 	movhi	r2,40960
14d800a4:	10841004 	addi	r2,r2,4160
14d800a8:	00c00704 	movi	r3,28
14d800ac:	10c00215 	stw	r3,8(r2)
    	shared_buffer->cnt = 0;
14d800b0:	00a80034 	movhi	r2,40960
14d800b4:	10841004 	addi	r2,r2,4160
14d800b8:	10000315 	stw	zero,12(r2)
    	shared_buffer->max_cnt = RINGBUF_MAX_COUNT;
14d800bc:	00a80034 	movhi	r2,40960
14d800c0:	10841004 	addi	r2,r2,4160
14d800c4:	00c00744 	movi	r3,29
14d800c8:	10c00415 	stw	r3,16(r2)
    }
}
14d800cc:	0001883a 	nop
14d800d0:	e037883a 	mov	sp,fp
14d800d4:	df000017 	ldw	fp,0(sp)
14d800d8:	dec00104 	addi	sp,sp,4
14d800dc:	f800283a 	ret

14d800e0 <ringbuf_enqueue>:
/**
 * @brief Enqueue data to buffer
 * @param data Data to enqueue
 */
uint32_t ringbuf_enqueue(item_t *data)
{
14d800e0:	defffe04 	addi	sp,sp,-8
14d800e4:	df000115 	stw	fp,4(sp)
14d800e8:	df000104 	addi	fp,sp,4
14d800ec:	e13fff15 	stw	r4,-4(fp)
    // store data
	if ((shared_buffer->cnt + 1) <= shared_buffer->max_cnt)
14d800f0:	00a80034 	movhi	r2,40960
14d800f4:	10841004 	addi	r2,r2,4160
14d800f8:	10800317 	ldw	r2,12(r2)
14d800fc:	10c00044 	addi	r3,r2,1
14d80100:	00a80034 	movhi	r2,40960
14d80104:	10841004 	addi	r2,r2,4160
14d80108:	10800417 	ldw	r2,16(r2)
14d8010c:	10c03036 	bltu	r2,r3,14d801d0 <ringbuf_enqueue+0xf0>
	{
		shared_buffer->buffer[shared_buffer->head] = *data;
14d80110:	00a80034 	movhi	r2,40960
14d80114:	10841004 	addi	r2,r2,4160
14d80118:	00e80034 	movhi	r3,40960
14d8011c:	18c41004 	addi	r3,r3,4160
14d80120:	18c00017 	ldw	r3,0(r3)
14d80124:	1806917a 	slli	r3,r3,5
14d80128:	10c5883a 	add	r2,r2,r3
14d8012c:	10800604 	addi	r2,r2,24
14d80130:	e0ffff17 	ldw	r3,-4(fp)
14d80134:	19000017 	ldw	r4,0(r3)
14d80138:	11000015 	stw	r4,0(r2)
14d8013c:	19000117 	ldw	r4,4(r3)
14d80140:	11000115 	stw	r4,4(r2)
14d80144:	19000217 	ldw	r4,8(r3)
14d80148:	11000215 	stw	r4,8(r2)
14d8014c:	19000317 	ldw	r4,12(r3)
14d80150:	11000315 	stw	r4,12(r2)
14d80154:	19000417 	ldw	r4,16(r3)
14d80158:	11000415 	stw	r4,16(r2)
14d8015c:	19000517 	ldw	r4,20(r3)
14d80160:	11000515 	stw	r4,20(r2)
14d80164:	19000617 	ldw	r4,24(r3)
14d80168:	11000615 	stw	r4,24(r2)
14d8016c:	18c00717 	ldw	r3,28(r3)
14d80170:	10c00715 	stw	r3,28(r2)

		// update Head pointer
		if (shared_buffer->head == shared_buffer->end)
14d80174:	00a80034 	movhi	r2,40960
14d80178:	10841004 	addi	r2,r2,4160
14d8017c:	10c00017 	ldw	r3,0(r2)
14d80180:	00a80034 	movhi	r2,40960
14d80184:	10841004 	addi	r2,r2,4160
14d80188:	10800217 	ldw	r2,8(r2)
14d8018c:	1880041e 	bne	r3,r2,14d801a0 <ringbuf_enqueue+0xc0>
		{
			shared_buffer->head = 0;
14d80190:	00a80034 	movhi	r2,40960
14d80194:	10841004 	addi	r2,r2,4160
14d80198:	10000015 	stw	zero,0(r2)
14d8019c:	00000506 	br	14d801b4 <ringbuf_enqueue+0xd4>
		}
		else
		{
			shared_buffer->head++;
14d801a0:	00a80034 	movhi	r2,40960
14d801a4:	10841004 	addi	r2,r2,4160
14d801a8:	10c00017 	ldw	r3,0(r2)
14d801ac:	18c00044 	addi	r3,r3,1
14d801b0:	10c00015 	stw	r3,0(r2)
		}

		// update data count
		shared_buffer->cnt++;
14d801b4:	00a80034 	movhi	r2,40960
14d801b8:	10841004 	addi	r2,r2,4160
14d801bc:	10c00317 	ldw	r3,12(r2)
14d801c0:	18c00044 	addi	r3,r3,1
14d801c4:	10c00315 	stw	r3,12(r2)

		return 0;
14d801c8:	0005883a 	mov	r2,zero
14d801cc:	00000106 	br	14d801d4 <ringbuf_enqueue+0xf4>
	}
	else
	{
		return 1;
14d801d0:	00800044 	movi	r2,1
	}
}
14d801d4:	e037883a 	mov	sp,fp
14d801d8:	df000017 	ldw	fp,0(sp)
14d801dc:	dec00104 	addi	sp,sp,4
14d801e0:	f800283a 	ret

14d801e4 <ringbuf_dequeue>:
/**
 * @brief Dequeue data from buffer
 * @param data Data buffer where read data is saved
 */
uint32_t ringbuf_dequeue(item_t *data)
{
14d801e4:	defffe04 	addi	sp,sp,-8
14d801e8:	df000115 	stw	fp,4(sp)
14d801ec:	df000104 	addi	fp,sp,4
14d801f0:	e13fff15 	stw	r4,-4(fp)
    // check if buffer is empty
    if ((shared_buffer->head == shared_buffer->tail) && (shared_buffer->cnt == 0))
14d801f4:	00a80034 	movhi	r2,40960
14d801f8:	10841004 	addi	r2,r2,4160
14d801fc:	10c00017 	ldw	r3,0(r2)
14d80200:	00a80034 	movhi	r2,40960
14d80204:	10841004 	addi	r2,r2,4160
14d80208:	10800117 	ldw	r2,4(r2)
14d8020c:	1880061e 	bne	r3,r2,14d80228 <ringbuf_dequeue+0x44>
14d80210:	00a80034 	movhi	r2,40960
14d80214:	10841004 	addi	r2,r2,4160
14d80218:	10800317 	ldw	r2,12(r2)
14d8021c:	1000021e 	bne	r2,zero,14d80228 <ringbuf_dequeue+0x44>
    {
        return 1;
14d80220:	00800044 	movi	r2,1
14d80224:	00003306 	br	14d802f4 <ringbuf_dequeue+0x110>
    }
    else
    {
        // if there is data, read it
        *data = shared_buffer->buffer[shared_buffer->tail];
14d80228:	00e80034 	movhi	r3,40960
14d8022c:	18c41004 	addi	r3,r3,4160
14d80230:	00a80034 	movhi	r2,40960
14d80234:	10841004 	addi	r2,r2,4160
14d80238:	11000117 	ldw	r4,4(r2)
14d8023c:	e0bfff17 	ldw	r2,-4(fp)
14d80240:	2008917a 	slli	r4,r4,5
14d80244:	1907883a 	add	r3,r3,r4
14d80248:	18c00604 	addi	r3,r3,24
14d8024c:	19000017 	ldw	r4,0(r3)
14d80250:	11000015 	stw	r4,0(r2)
14d80254:	19000117 	ldw	r4,4(r3)
14d80258:	11000115 	stw	r4,4(r2)
14d8025c:	19000217 	ldw	r4,8(r3)
14d80260:	11000215 	stw	r4,8(r2)
14d80264:	19000317 	ldw	r4,12(r3)
14d80268:	11000315 	stw	r4,12(r2)
14d8026c:	19000417 	ldw	r4,16(r3)
14d80270:	11000415 	stw	r4,16(r2)
14d80274:	19000517 	ldw	r4,20(r3)
14d80278:	11000515 	stw	r4,20(r2)
14d8027c:	19000617 	ldw	r4,24(r3)
14d80280:	11000615 	stw	r4,24(r2)
14d80284:	18c00717 	ldw	r3,28(r3)
14d80288:	10c00715 	stw	r3,28(r2)

        // update Tail pointer
        if (shared_buffer->tail == shared_buffer->end)
14d8028c:	00a80034 	movhi	r2,40960
14d80290:	10841004 	addi	r2,r2,4160
14d80294:	10c00117 	ldw	r3,4(r2)
14d80298:	00a80034 	movhi	r2,40960
14d8029c:	10841004 	addi	r2,r2,4160
14d802a0:	10800217 	ldw	r2,8(r2)
14d802a4:	1880041e 	bne	r3,r2,14d802b8 <ringbuf_dequeue+0xd4>
        {
            shared_buffer->tail = 0;
14d802a8:	00a80034 	movhi	r2,40960
14d802ac:	10841004 	addi	r2,r2,4160
14d802b0:	10000115 	stw	zero,4(r2)
14d802b4:	00000506 	br	14d802cc <ringbuf_dequeue+0xe8>
        }
        else
        {
            shared_buffer->tail++;
14d802b8:	00a80034 	movhi	r2,40960
14d802bc:	10841004 	addi	r2,r2,4160
14d802c0:	10c00117 	ldw	r3,4(r2)
14d802c4:	18c00044 	addi	r3,r3,1
14d802c8:	10c00115 	stw	r3,4(r2)
        }

        // update data count
        if (shared_buffer->cnt > 0)
14d802cc:	00a80034 	movhi	r2,40960
14d802d0:	10841004 	addi	r2,r2,4160
14d802d4:	10800317 	ldw	r2,12(r2)
14d802d8:	10000526 	beq	r2,zero,14d802f0 <ringbuf_dequeue+0x10c>
        {
            shared_buffer->cnt--;
14d802dc:	00a80034 	movhi	r2,40960
14d802e0:	10841004 	addi	r2,r2,4160
14d802e4:	10c00317 	ldw	r3,12(r2)
14d802e8:	18ffffc4 	addi	r3,r3,-1
14d802ec:	10c00315 	stw	r3,12(r2)
        }
    }

    return 0;
14d802f0:	0005883a 	mov	r2,zero
}
14d802f4:	e037883a 	mov	sp,fp
14d802f8:	df000017 	ldw	fp,0(sp)
14d802fc:	dec00104 	addi	sp,sp,4
14d80300:	f800283a 	ret

14d80304 <_fp_mult>:
/**
 * @brief Function that multiplies two Q2.14 fixed-point numbers.
 * Note: Overflow isn't included since numbers are < 1
 */
int16_t _fp_mult(int16_t a, int16_t b)
{
14d80304:	defffb04 	addi	sp,sp,-20
14d80308:	df000415 	stw	fp,16(sp)
14d8030c:	df000404 	addi	fp,sp,16
14d80310:	2007883a 	mov	r3,r4
14d80314:	2805883a 	mov	r2,r5
14d80318:	e0fffe0d 	sth	r3,-8(fp)
14d8031c:	e0bfff0d 	sth	r2,-4(fp)
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
14d80320:	e0fffe0f 	ldh	r3,-8(fp)
14d80324:	e0bfff0f 	ldh	r2,-4(fp)
14d80328:	1885383a 	mul	r2,r3,r2
14d8032c:	e0bffc15 	stw	r2,-16(fp)

    // rounding: mid values are rounded up
    tmp += K;
14d80330:	e0bffc17 	ldw	r2,-16(fp)
14d80334:	10880004 	addi	r2,r2,8192
14d80338:	e0bffc15 	stw	r2,-16(fp)

    // correct by dividing by base
    res = tmp >> FP_FRAC;
14d8033c:	e0bffc17 	ldw	r2,-16(fp)
14d80340:	1005d3ba 	srai	r2,r2,14
14d80344:	e0bffd0d 	sth	r2,-12(fp)

    return res;
14d80348:	e0bffd0b 	ldhu	r2,-12(fp)
}
14d8034c:	e037883a 	mov	sp,fp
14d80350:	df000017 	ldw	fp,0(sp)
14d80354:	dec00104 	addi	sp,sp,4
14d80358:	f800283a 	ret

14d8035c <main>:

/**
 * @brief Function that implements the worker's tasks.
 */
int main()
{
14d8035c:	deffee04 	addi	sp,sp,-72
14d80360:	dfc01115 	stw	ra,68(sp)
14d80364:	df001015 	stw	fp,64(sp)
14d80368:	df001004 	addi	fp,sp,64
	/* variables that pass through the rows and columns
	 * of the assigned matrix part; the width is set to one
	 * because the most left and right columns of all task
	 * should not be changed
	 */
	int h = 0;
14d8036c:	e03ff015 	stw	zero,-64(fp)
	int w = 1;
14d80370:	00800044 	movi	r2,1
14d80374:	e0bff115 	stw	r2,-60(fp)

	/* variable in which all the information the manager
	 * sent to the worker is packed; it represents a task
	 * for one worker
	 */
	item_t item = { { 0 } };
14d80378:	e03ff815 	stw	zero,-32(fp)
14d8037c:	e03ff915 	stw	zero,-28(fp)
14d80380:	e03ffa15 	stw	zero,-24(fp)
14d80384:	e03ffb15 	stw	zero,-20(fp)
14d80388:	e03ffc15 	stw	zero,-16(fp)
14d8038c:	e03ffd15 	stw	zero,-12(fp)
14d80390:	e03ffe15 	stw	zero,-8(fp)
14d80394:	e03fff15 	stw	zero,-4(fp)
	 * necessary for the start of the matrix part processing
	 */
	uint8_t retval;

	// mutex initialization
	mutex = altera_avalon_mutex_open(MUTEX_NAME);
14d80398:	01053634 	movhi	r4,5336
14d8039c:	21042c04 	addi	r4,r4,4272
14d803a0:	4d80c000 	call	14d80c00 <altera_avalon_mutex_open>
14d803a4:	d0a01e15 	stw	r2,-32648(gp)

	// fifo initialization
	altera_avalon_fifo_init(ACK_FIFO_IN_CSR_BASE, 0, 2, 12);
14d803a8:	01c00304 	movi	r7,12
14d803ac:	01800084 	movi	r6,2
14d803b0:	000b883a 	mov	r5,zero
14d803b4:	01080034 	movhi	r4,8192
14d803b8:	4d80adc0 	call	14d80adc <altera_avalon_fifo_init>

	while (1)
	{
		// worker tries to take the mutex every 1 ms
		while (altera_avalon_mutex_trylock(mutex, 0x5A) != 0)
14d803bc:	00000206 	br	14d803c8 <main+0x6c>
		{
			usleep(1000); // 1 ms
14d803c0:	0100fa04 	movi	r4,1000
14d803c4:	4d809fc0 	call	14d809fc <usleep>
	altera_avalon_fifo_init(ACK_FIFO_IN_CSR_BASE, 0, 2, 12);

	while (1)
	{
		// worker tries to take the mutex every 1 ms
		while (altera_avalon_mutex_trylock(mutex, 0x5A) != 0)
14d803c8:	d0a01e17 	ldw	r2,-32648(gp)
14d803cc:	01401684 	movi	r5,90
14d803d0:	1009883a 	mov	r4,r2
14d803d4:	4d80c740 	call	14d80c74 <altera_avalon_mutex_trylock>
14d803d8:	103ff91e 	bne	r2,zero,14d803c0 <__alt_mem_shared_ocm+0xf4d7f3c0>
		{
			usleep(1000); // 1 ms
		}

		// if the mutex is successfully taken, get an assignment
		retval = ringbuf_dequeue(&item);
14d803dc:	e0bff804 	addi	r2,fp,-32
14d803e0:	1009883a 	mov	r4,r2
14d803e4:	4d801e40 	call	14d801e4 <ringbuf_dequeue>
14d803e8:	e0bff405 	stb	r2,-48(fp)

		// release the mutex
		altera_avalon_mutex_unlock(mutex);
14d803ec:	d0a01e17 	ldw	r2,-32648(gp)
14d803f0:	1009883a 	mov	r4,r2
14d803f4:	4d80c9c0 	call	14d80c9c <altera_avalon_mutex_unlock>

		// if the ringbuffer is empty, wait 100 ms until
		// the next try
		if (retval == 1)
14d803f8:	e0bff403 	ldbu	r2,-48(fp)
14d803fc:	10800058 	cmpnei	r2,r2,1
14d80400:	1000041e 	bne	r2,zero,14d80414 <main+0xb8>
		{
			usleep(1000000); // 100 ms
14d80404:	010003f4 	movhi	r4,15
14d80408:	21109004 	addi	r4,r4,16960
14d8040c:	4d809fc0 	call	14d809fc <usleep>
14d80410:	003fea06 	br	14d803bc <__alt_mem_shared_ocm+0xf4d7f3bc>
		// otherwise, begin processing
		else
		{
			// if the assigned horizontal part is the top one,
			// the first row should not be processed
			if (item.id == 0)
14d80414:	e0bff817 	ldw	r2,-32(fp)
14d80418:	1001291e 	bne	r2,zero,14d808c0 <main+0x564>
			{
				h++;
14d8041c:	e0bff017 	ldw	r2,-64(fp)
14d80420:	10800044 	addi	r2,r2,1
14d80424:	e0bff015 	stw	r2,-64(fp)
			}
			// pass through all the rows
			while (h < item.region_height)
14d80428:	00012506 	br	14d808c0 <main+0x564>
			{
				// if the assigned horizontal part is the bottom one,
				// the last row should not be processed
				if ((h == item.region_height - 1) && (item.id == TOTAL_NUM_OF_TASKS - 1))
14d8042c:	e0bffc17 	ldw	r2,-16(fp)
14d80430:	10ffffc4 	addi	r3,r2,-1
14d80434:	e0bff017 	ldw	r2,-64(fp)
14d80438:	1881181e 	bne	r3,r2,14d8089c <main+0x540>
14d8043c:	e0bff817 	ldw	r2,-32(fp)
14d80440:	108003d8 	cmpnei	r2,r2,15
14d80444:	10012226 	beq	r2,zero,14d808d0 <main+0x574>
				{
					break;
				}

				// pass through all the columns
				while (w < item.region_width - 1)
14d80448:	00011406 	br	14d8089c <main+0x540>
				{
					// calculate the exact row and column of
					// the input matrix
					x = item.col_start + w;
14d8044c:	e0fffa17 	ldw	r3,-24(fp)
14d80450:	e0bff117 	ldw	r2,-60(fp)
14d80454:	1885883a 	add	r2,r3,r2
14d80458:	e0bff515 	stw	r2,-44(fp)
					y = item.row_start + h;
14d8045c:	e0fff917 	ldw	r3,-28(fp)
14d80460:	e0bff017 	ldw	r2,-64(fp)
14d80464:	1885883a 	add	r2,r3,r2
14d80468:	e0bff615 	stw	r2,-40(fp)

                    // don't update heat for sources
					uint8_t is_source = 0;
14d8046c:	e03ff205 	stb	zero,-56(fp)

					for (int src = 0; src < *nr_heat_src; src++)
14d80470:	e03ff315 	stw	zero,-52(fp)
14d80474:	00001606 	br	14d804d0 <main+0x174>
					{
						if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
14d80478:	d0e00817 	ldw	r3,-32736(gp)
14d8047c:	e0bff317 	ldw	r2,-52(fp)
14d80480:	108001a4 	muli	r2,r2,6
14d80484:	1885883a 	add	r2,r3,r2
14d80488:	1080000b 	ldhu	r2,0(r2)
14d8048c:	10ffffcc 	andi	r3,r2,65535
14d80490:	e0bff517 	ldw	r2,-44(fp)
14d80494:	18800b1e 	bne	r3,r2,14d804c4 <main+0x168>
14d80498:	d0e00817 	ldw	r3,-32736(gp)
14d8049c:	e0bff317 	ldw	r2,-52(fp)
14d804a0:	108001a4 	muli	r2,r2,6
14d804a4:	1885883a 	add	r2,r3,r2
14d804a8:	1080008b 	ldhu	r2,2(r2)
14d804ac:	10ffffcc 	andi	r3,r2,65535
14d804b0:	e0bff617 	ldw	r2,-40(fp)
14d804b4:	1880031e 	bne	r3,r2,14d804c4 <main+0x168>
						{
							is_source = 1;
14d804b8:	00800044 	movi	r2,1
14d804bc:	e0bff205 	stb	r2,-56(fp)
							break;
14d804c0:	00000806 	br	14d804e4 <main+0x188>
					y = item.row_start + h;

                    // don't update heat for sources
					uint8_t is_source = 0;

					for (int src = 0; src < *nr_heat_src; src++)
14d804c4:	e0bff317 	ldw	r2,-52(fp)
14d804c8:	10800044 	addi	r2,r2,1
14d804cc:	e0bff315 	stw	r2,-52(fp)
14d804d0:	d0a00717 	ldw	r2,-32740(gp)
14d804d4:	1080000b 	ldhu	r2,0(r2)
14d804d8:	10bfffcc 	andi	r2,r2,65535
14d804dc:	e0fff317 	ldw	r3,-52(fp)
14d804e0:	18bfe516 	blt	r3,r2,14d80478 <__alt_mem_shared_ocm+0xf4d7f478>
						}
					}

					// calculate the position of the element
					// to be processed
					uint32_t id = y * *width + x;
14d804e4:	d0a00117 	ldw	r2,-32764(gp)
14d804e8:	10c00017 	ldw	r3,0(r2)
14d804ec:	e0bff617 	ldw	r2,-40(fp)
14d804f0:	1887383a 	mul	r3,r3,r2
14d804f4:	e0bff517 	ldw	r2,-44(fp)
14d804f8:	1885883a 	add	r2,r3,r2
14d804fc:	e0bff715 	stw	r2,-36(fp)

					// set the element in the output matrix based
					// on the value of item.input_matrix variable
					if (item.input_matrix == BUF_1)
14d80500:	e0bffd17 	ldw	r2,-12(fp)
14d80504:	10800058 	cmpnei	r2,r2,1
14d80508:	1000711e 	bne	r2,zero,14d806d0 <main+0x374>
					{
						matrix2[id] = matrix1[id];
14d8050c:	d0e00617 	ldw	r3,-32744(gp)
14d80510:	e0bff717 	ldw	r2,-36(fp)
14d80514:	1085883a 	add	r2,r2,r2
14d80518:	1887883a 	add	r3,r3,r2
14d8051c:	d1200517 	ldw	r4,-32748(gp)
14d80520:	e0bff717 	ldw	r2,-36(fp)
14d80524:	1085883a 	add	r2,r2,r2
14d80528:	2085883a 	add	r2,r4,r2
14d8052c:	1080000b 	ldhu	r2,0(r2)
14d80530:	1880000d 	sth	r2,0(r3)

						// modify the element only if it is not heat source
						if (!is_source)
14d80534:	e0bff203 	ldbu	r2,-56(fp)
14d80538:	1000d51e 	bne	r2,zero,14d80890 <main+0x534>
						{
							// calculate the transfer across the x axis
							matrix2[id] += _fp_mult(*c_x, (matrix1[id + 1] + matrix1[id - 1] - (matrix1[id] << 1)));
14d8053c:	d0a00317 	ldw	r2,-32756(gp)
14d80540:	1080000b 	ldhu	r2,0(r2)
14d80544:	11bfffcc 	andi	r6,r2,65535
14d80548:	31a0001c 	xori	r6,r6,32768
14d8054c:	31a00004 	addi	r6,r6,-32768
14d80550:	d0e00517 	ldw	r3,-32748(gp)
14d80554:	e0bff717 	ldw	r2,-36(fp)
14d80558:	10800044 	addi	r2,r2,1
14d8055c:	1085883a 	add	r2,r2,r2
14d80560:	1885883a 	add	r2,r3,r2
14d80564:	1080000b 	ldhu	r2,0(r2)
14d80568:	100b883a 	mov	r5,r2
14d8056c:	d0e00517 	ldw	r3,-32748(gp)
14d80570:	e13ff717 	ldw	r4,-36(fp)
14d80574:	00a00034 	movhi	r2,32768
14d80578:	10bfffc4 	addi	r2,r2,-1
14d8057c:	2085883a 	add	r2,r4,r2
14d80580:	1085883a 	add	r2,r2,r2
14d80584:	1885883a 	add	r2,r3,r2
14d80588:	1080000b 	ldhu	r2,0(r2)
14d8058c:	2885883a 	add	r2,r5,r2
14d80590:	1009883a 	mov	r4,r2
14d80594:	d0e00517 	ldw	r3,-32748(gp)
14d80598:	e0bff717 	ldw	r2,-36(fp)
14d8059c:	1085883a 	add	r2,r2,r2
14d805a0:	1885883a 	add	r2,r3,r2
14d805a4:	1080000b 	ldhu	r2,0(r2)
14d805a8:	1085883a 	add	r2,r2,r2
14d805ac:	2085c83a 	sub	r2,r4,r2
14d805b0:	10bfffcc 	andi	r2,r2,65535
14d805b4:	10a0001c 	xori	r2,r2,32768
14d805b8:	10a00004 	addi	r2,r2,-32768
14d805bc:	100b883a 	mov	r5,r2
14d805c0:	3009883a 	mov	r4,r6
14d805c4:	4d803040 	call	14d80304 <_fp_mult>
14d805c8:	100b883a 	mov	r5,r2
14d805cc:	d0e00617 	ldw	r3,-32744(gp)
14d805d0:	e0bff717 	ldw	r2,-36(fp)
14d805d4:	1085883a 	add	r2,r2,r2
14d805d8:	1887883a 	add	r3,r3,r2
14d805dc:	d1200617 	ldw	r4,-32744(gp)
14d805e0:	e0bff717 	ldw	r2,-36(fp)
14d805e4:	1085883a 	add	r2,r2,r2
14d805e8:	2085883a 	add	r2,r4,r2
14d805ec:	1080000b 	ldhu	r2,0(r2)
14d805f0:	1009883a 	mov	r4,r2
14d805f4:	2805883a 	mov	r2,r5
14d805f8:	2085883a 	add	r2,r4,r2
14d805fc:	1880000d 	sth	r2,0(r3)
							// calculate the transfer across the y axis
							matrix2[id] += _fp_mult(*c_y, (matrix1[id + *width] + matrix1[id - *width] - (matrix1[id] << 1)));
14d80600:	d0a00417 	ldw	r2,-32752(gp)
14d80604:	1080000b 	ldhu	r2,0(r2)
14d80608:	11bfffcc 	andi	r6,r2,65535
14d8060c:	31a0001c 	xori	r6,r6,32768
14d80610:	31a00004 	addi	r6,r6,-32768
14d80614:	d0e00517 	ldw	r3,-32748(gp)
14d80618:	d0a00117 	ldw	r2,-32764(gp)
14d8061c:	11000017 	ldw	r4,0(r2)
14d80620:	e0bff717 	ldw	r2,-36(fp)
14d80624:	2085883a 	add	r2,r4,r2
14d80628:	1085883a 	add	r2,r2,r2
14d8062c:	1885883a 	add	r2,r3,r2
14d80630:	1080000b 	ldhu	r2,0(r2)
14d80634:	100b883a 	mov	r5,r2
14d80638:	d0e00517 	ldw	r3,-32748(gp)
14d8063c:	d0a00117 	ldw	r2,-32764(gp)
14d80640:	10800017 	ldw	r2,0(r2)
14d80644:	e13ff717 	ldw	r4,-36(fp)
14d80648:	2085c83a 	sub	r2,r4,r2
14d8064c:	1085883a 	add	r2,r2,r2
14d80650:	1885883a 	add	r2,r3,r2
14d80654:	1080000b 	ldhu	r2,0(r2)
14d80658:	2885883a 	add	r2,r5,r2
14d8065c:	1009883a 	mov	r4,r2
14d80660:	d0e00517 	ldw	r3,-32748(gp)
14d80664:	e0bff717 	ldw	r2,-36(fp)
14d80668:	1085883a 	add	r2,r2,r2
14d8066c:	1885883a 	add	r2,r3,r2
14d80670:	1080000b 	ldhu	r2,0(r2)
14d80674:	1085883a 	add	r2,r2,r2
14d80678:	2085c83a 	sub	r2,r4,r2
14d8067c:	10bfffcc 	andi	r2,r2,65535
14d80680:	10a0001c 	xori	r2,r2,32768
14d80684:	10a00004 	addi	r2,r2,-32768
14d80688:	100b883a 	mov	r5,r2
14d8068c:	3009883a 	mov	r4,r6
14d80690:	4d803040 	call	14d80304 <_fp_mult>
14d80694:	100b883a 	mov	r5,r2
14d80698:	d0e00617 	ldw	r3,-32744(gp)
14d8069c:	e0bff717 	ldw	r2,-36(fp)
14d806a0:	1085883a 	add	r2,r2,r2
14d806a4:	1887883a 	add	r3,r3,r2
14d806a8:	d1200617 	ldw	r4,-32744(gp)
14d806ac:	e0bff717 	ldw	r2,-36(fp)
14d806b0:	1085883a 	add	r2,r2,r2
14d806b4:	2085883a 	add	r2,r4,r2
14d806b8:	1080000b 	ldhu	r2,0(r2)
14d806bc:	1009883a 	mov	r4,r2
14d806c0:	2805883a 	mov	r2,r5
14d806c4:	2085883a 	add	r2,r4,r2
14d806c8:	1880000d 	sth	r2,0(r3)
14d806cc:	00007006 	br	14d80890 <main+0x534>
						}
					}
					else
					{
						matrix1[id] = matrix2[id];
14d806d0:	d0e00517 	ldw	r3,-32748(gp)
14d806d4:	e0bff717 	ldw	r2,-36(fp)
14d806d8:	1085883a 	add	r2,r2,r2
14d806dc:	1887883a 	add	r3,r3,r2
14d806e0:	d1200617 	ldw	r4,-32744(gp)
14d806e4:	e0bff717 	ldw	r2,-36(fp)
14d806e8:	1085883a 	add	r2,r2,r2
14d806ec:	2085883a 	add	r2,r4,r2
14d806f0:	1080000b 	ldhu	r2,0(r2)
14d806f4:	1880000d 	sth	r2,0(r3)

						// modify the element only if it is not heat source
						if (!is_source)
14d806f8:	e0bff203 	ldbu	r2,-56(fp)
14d806fc:	1000641e 	bne	r2,zero,14d80890 <main+0x534>
						{
							// calculate the transfer across the x axis
							matrix1[id] += _fp_mult(*c_x, (matrix2[id + 1] + matrix2[id - 1] - (matrix2[id] << 1)));
14d80700:	d0a00317 	ldw	r2,-32756(gp)
14d80704:	1080000b 	ldhu	r2,0(r2)
14d80708:	11bfffcc 	andi	r6,r2,65535
14d8070c:	31a0001c 	xori	r6,r6,32768
14d80710:	31a00004 	addi	r6,r6,-32768
14d80714:	d0e00617 	ldw	r3,-32744(gp)
14d80718:	e0bff717 	ldw	r2,-36(fp)
14d8071c:	10800044 	addi	r2,r2,1
14d80720:	1085883a 	add	r2,r2,r2
14d80724:	1885883a 	add	r2,r3,r2
14d80728:	1080000b 	ldhu	r2,0(r2)
14d8072c:	100b883a 	mov	r5,r2
14d80730:	d0e00617 	ldw	r3,-32744(gp)
14d80734:	e13ff717 	ldw	r4,-36(fp)
14d80738:	00a00034 	movhi	r2,32768
14d8073c:	10bfffc4 	addi	r2,r2,-1
14d80740:	2085883a 	add	r2,r4,r2
14d80744:	1085883a 	add	r2,r2,r2
14d80748:	1885883a 	add	r2,r3,r2
14d8074c:	1080000b 	ldhu	r2,0(r2)
14d80750:	2885883a 	add	r2,r5,r2
14d80754:	1009883a 	mov	r4,r2
14d80758:	d0e00617 	ldw	r3,-32744(gp)
14d8075c:	e0bff717 	ldw	r2,-36(fp)
14d80760:	1085883a 	add	r2,r2,r2
14d80764:	1885883a 	add	r2,r3,r2
14d80768:	1080000b 	ldhu	r2,0(r2)
14d8076c:	1085883a 	add	r2,r2,r2
14d80770:	2085c83a 	sub	r2,r4,r2
14d80774:	10bfffcc 	andi	r2,r2,65535
14d80778:	10a0001c 	xori	r2,r2,32768
14d8077c:	10a00004 	addi	r2,r2,-32768
14d80780:	100b883a 	mov	r5,r2
14d80784:	3009883a 	mov	r4,r6
14d80788:	4d803040 	call	14d80304 <_fp_mult>
14d8078c:	100b883a 	mov	r5,r2
14d80790:	d0e00517 	ldw	r3,-32748(gp)
14d80794:	e0bff717 	ldw	r2,-36(fp)
14d80798:	1085883a 	add	r2,r2,r2
14d8079c:	1887883a 	add	r3,r3,r2
14d807a0:	d1200517 	ldw	r4,-32748(gp)
14d807a4:	e0bff717 	ldw	r2,-36(fp)
14d807a8:	1085883a 	add	r2,r2,r2
14d807ac:	2085883a 	add	r2,r4,r2
14d807b0:	1080000b 	ldhu	r2,0(r2)
14d807b4:	1009883a 	mov	r4,r2
14d807b8:	2805883a 	mov	r2,r5
14d807bc:	2085883a 	add	r2,r4,r2
14d807c0:	1880000d 	sth	r2,0(r3)
							// calculate the transfer across the y axis
							matrix1[id] += _fp_mult(*c_y, (matrix2[id + *width] + matrix2[id - *width] - (matrix2[id] << 1)));
14d807c4:	d0a00417 	ldw	r2,-32752(gp)
14d807c8:	1080000b 	ldhu	r2,0(r2)
14d807cc:	11bfffcc 	andi	r6,r2,65535
14d807d0:	31a0001c 	xori	r6,r6,32768
14d807d4:	31a00004 	addi	r6,r6,-32768
14d807d8:	d0e00617 	ldw	r3,-32744(gp)
14d807dc:	d0a00117 	ldw	r2,-32764(gp)
14d807e0:	11000017 	ldw	r4,0(r2)
14d807e4:	e0bff717 	ldw	r2,-36(fp)
14d807e8:	2085883a 	add	r2,r4,r2
14d807ec:	1085883a 	add	r2,r2,r2
14d807f0:	1885883a 	add	r2,r3,r2
14d807f4:	1080000b 	ldhu	r2,0(r2)
14d807f8:	100b883a 	mov	r5,r2
14d807fc:	d0e00617 	ldw	r3,-32744(gp)
14d80800:	d0a00117 	ldw	r2,-32764(gp)
14d80804:	10800017 	ldw	r2,0(r2)
14d80808:	e13ff717 	ldw	r4,-36(fp)
14d8080c:	2085c83a 	sub	r2,r4,r2
14d80810:	1085883a 	add	r2,r2,r2
14d80814:	1885883a 	add	r2,r3,r2
14d80818:	1080000b 	ldhu	r2,0(r2)
14d8081c:	2885883a 	add	r2,r5,r2
14d80820:	1009883a 	mov	r4,r2
14d80824:	d0e00617 	ldw	r3,-32744(gp)
14d80828:	e0bff717 	ldw	r2,-36(fp)
14d8082c:	1085883a 	add	r2,r2,r2
14d80830:	1885883a 	add	r2,r3,r2
14d80834:	1080000b 	ldhu	r2,0(r2)
14d80838:	1085883a 	add	r2,r2,r2
14d8083c:	2085c83a 	sub	r2,r4,r2
14d80840:	10bfffcc 	andi	r2,r2,65535
14d80844:	10a0001c 	xori	r2,r2,32768
14d80848:	10a00004 	addi	r2,r2,-32768
14d8084c:	100b883a 	mov	r5,r2
14d80850:	3009883a 	mov	r4,r6
14d80854:	4d803040 	call	14d80304 <_fp_mult>
14d80858:	100b883a 	mov	r5,r2
14d8085c:	d0e00517 	ldw	r3,-32748(gp)
14d80860:	e0bff717 	ldw	r2,-36(fp)
14d80864:	1085883a 	add	r2,r2,r2
14d80868:	1887883a 	add	r3,r3,r2
14d8086c:	d1200517 	ldw	r4,-32748(gp)
14d80870:	e0bff717 	ldw	r2,-36(fp)
14d80874:	1085883a 	add	r2,r2,r2
14d80878:	2085883a 	add	r2,r4,r2
14d8087c:	1080000b 	ldhu	r2,0(r2)
14d80880:	1009883a 	mov	r4,r2
14d80884:	2805883a 	mov	r2,r5
14d80888:	2085883a 	add	r2,r4,r2
14d8088c:	1880000d 	sth	r2,0(r3)
						}
					}
					w++;
14d80890:	e0bff117 	ldw	r2,-60(fp)
14d80894:	10800044 	addi	r2,r2,1
14d80898:	e0bff115 	stw	r2,-60(fp)
				{
					break;
				}

				// pass through all the columns
				while (w < item.region_width - 1)
14d8089c:	e0bffb17 	ldw	r2,-20(fp)
14d808a0:	10bfffc4 	addi	r2,r2,-1
14d808a4:	e0fff117 	ldw	r3,-60(fp)
14d808a8:	18bee836 	bltu	r3,r2,14d8044c <__alt_mem_shared_ocm+0xf4d7f44c>
							matrix1[id] += _fp_mult(*c_y, (matrix2[id + *width] + matrix2[id - *width] - (matrix2[id] << 1)));
						}
					}
					w++;
				}
				w = 1;
14d808ac:	00800044 	movi	r2,1
14d808b0:	e0bff115 	stw	r2,-60(fp)
				h++;
14d808b4:	e0bff017 	ldw	r2,-64(fp)
14d808b8:	10800044 	addi	r2,r2,1
14d808bc:	e0bff015 	stw	r2,-64(fp)
			if (item.id == 0)
			{
				h++;
			}
			// pass through all the rows
			while (h < item.region_height)
14d808c0:	e0bffc17 	ldw	r2,-16(fp)
14d808c4:	e0fff017 	ldw	r3,-64(fp)
14d808c8:	18bed836 	bltu	r3,r2,14d8042c <__alt_mem_shared_ocm+0xf4d7f42c>
14d808cc:	00000106 	br	14d808d4 <main+0x578>
			{
				// if the assigned horizontal part is the bottom one,
				// the last row should not be processed
				if ((h == item.region_height - 1) && (item.id == TOTAL_NUM_OF_TASKS - 1))
				{
					break;
14d808d0:	0001883a 	nop
					w++;
				}
				w = 1;
				h++;
			}
			h = 0;
14d808d4:	e03ff015 	stw	zero,-64(fp)
			// notify the manager that the task is completed
			altera_avalon_fifo_write_fifo(ACK_FIFO_IN_BASE, ACK_FIFO_IN_CSR_BASE, MY_ID);
14d808d8:	018000c4 	movi	r6,3
14d808dc:	01480034 	movhi	r5,8192
14d808e0:	01080034 	movhi	r4,8192
14d808e4:	21000804 	addi	r4,r4,32
14d808e8:	4d80b740 	call	14d80b74 <altera_avalon_fifo_write_fifo>
		}
	}
14d808ec:	003eb306 	br	14d803bc <__alt_mem_shared_ocm+0xf4d7f3bc>

14d808f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
14d808f0:	deffff04 	addi	sp,sp,-4
14d808f4:	01053634 	movhi	r4,5336
14d808f8:	01453634 	movhi	r5,5336
14d808fc:	dfc00015 	stw	ra,0(sp)
14d80900:	21043204 	addi	r4,r4,4296
14d80904:	29444304 	addi	r5,r5,4364

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
14d80908:	2140061e 	bne	r4,r5,14d80924 <alt_load+0x34>
14d8090c:	01053634 	movhi	r4,5336
14d80910:	01453634 	movhi	r5,5336
14d80914:	21000804 	addi	r4,r4,32
14d80918:	29400804 	addi	r5,r5,32
14d8091c:	2140121e 	bne	r4,r5,14d80968 <alt_load+0x78>
14d80920:	00000b06 	br	14d80950 <alt_load+0x60>
14d80924:	00c53634 	movhi	r3,5336
14d80928:	18c44304 	addi	r3,r3,4364
14d8092c:	1907c83a 	sub	r3,r3,r4
14d80930:	0005883a 	mov	r2,zero
  {
    while( to != end )
14d80934:	10fff526 	beq	r2,r3,14d8090c <__alt_mem_shared_ocm+0xf4d7f90c>
    {
      *to++ = *from++;
14d80938:	114f883a 	add	r7,r2,r5
14d8093c:	39c00017 	ldw	r7,0(r7)
14d80940:	110d883a 	add	r6,r2,r4
14d80944:	10800104 	addi	r2,r2,4
14d80948:	31c00015 	stw	r7,0(r6)
14d8094c:	003ff906 	br	14d80934 <__alt_mem_shared_ocm+0xf4d7f934>
14d80950:	01053634 	movhi	r4,5336
14d80954:	01453634 	movhi	r5,5336
14d80958:	21042c04 	addi	r4,r4,4272
14d8095c:	29442c04 	addi	r5,r5,4272

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
14d80960:	2140101e 	bne	r4,r5,14d809a4 <alt_load+0xb4>
14d80964:	00000b06 	br	14d80994 <alt_load+0xa4>
14d80968:	00c53634 	movhi	r3,5336
14d8096c:	18c00804 	addi	r3,r3,32
14d80970:	1907c83a 	sub	r3,r3,r4
14d80974:	0005883a 	mov	r2,zero
  {
    while( to != end )
14d80978:	10fff526 	beq	r2,r3,14d80950 <__alt_mem_shared_ocm+0xf4d7f950>
    {
      *to++ = *from++;
14d8097c:	114f883a 	add	r7,r2,r5
14d80980:	39c00017 	ldw	r7,0(r7)
14d80984:	110d883a 	add	r6,r2,r4
14d80988:	10800104 	addi	r2,r2,4
14d8098c:	31c00015 	stw	r7,0(r6)
14d80990:	003ff906 	br	14d80978 <__alt_mem_shared_ocm+0xf4d7f978>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
14d80994:	4d80d6c0 	call	14d80d6c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
14d80998:	dfc00017 	ldw	ra,0(sp)
14d8099c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
14d809a0:	4d80e641 	jmpi	14d80e64 <alt_icache_flush_all>
14d809a4:	00c53634 	movhi	r3,5336
14d809a8:	18c43204 	addi	r3,r3,4296
14d809ac:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
14d809b0:	0005883a 	mov	r2,zero
  {
    while( to != end )
14d809b4:	18bff726 	beq	r3,r2,14d80994 <__alt_mem_shared_ocm+0xf4d7f994>
    {
      *to++ = *from++;
14d809b8:	114f883a 	add	r7,r2,r5
14d809bc:	39c00017 	ldw	r7,0(r7)
14d809c0:	110d883a 	add	r6,r2,r4
14d809c4:	10800104 	addi	r2,r2,4
14d809c8:	31c00015 	stw	r7,0(r6)
14d809cc:	003ff906 	br	14d809b4 <__alt_mem_shared_ocm+0xf4d7f9b4>

14d809d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
14d809d0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
14d809d4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
14d809d8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
14d809dc:	4d80a000 	call	14d80a00 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
14d809e0:	4d80a200 	call	14d80a20 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
14d809e4:	d1a01f17 	ldw	r6,-32644(gp)
14d809e8:	d1602017 	ldw	r5,-32640(gp)
14d809ec:	d1202117 	ldw	r4,-32636(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
14d809f0:	dfc00017 	ldw	ra,0(sp)
14d809f4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
14d809f8:	4d8035c1 	jmpi	14d8035c <main>

14d809fc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
14d809fc:	4d80cf41 	jmpi	14d80cf4 <alt_busy_sleep>

14d80a00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
14d80a00:	deffff04 	addi	sp,sp,-4
14d80a04:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( WORKERS_CPU_3, workers_cpu_3);
14d80a08:	4d80e700 	call	14d80e70 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
14d80a0c:	00800044 	movi	r2,1
14d80a10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
14d80a14:	dfc00017 	ldw	ra,0(sp)
14d80a18:	dec00104 	addi	sp,sp,4
14d80a1c:	f800283a 	ret

14d80a20 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
14d80a20:	01053634 	movhi	r4,5336
14d80a24:	d1600a04 	addi	r5,gp,-32728
14d80a28:	21043204 	addi	r4,r4,4296
14d80a2c:	4d80d841 	jmpi	14d80d84 <alt_dev_llist_insert>

14d80a30 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
14d80a30:	20800137 	ldwio	r2,4(r4)
}
14d80a34:	1144703a 	and	r2,r2,r5
14d80a38:	f800283a 	ret

14d80a3c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
14d80a3c:	20800337 	ldwio	r2,12(r4)
}
14d80a40:	1144703a 	and	r2,r2,r5
14d80a44:	f800283a 	ret

14d80a48 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
14d80a48:	20800437 	ldwio	r2,16(r4)
14d80a4c:	f800283a 	ret

14d80a50 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
14d80a50:	20800537 	ldwio	r2,20(r4)
14d80a54:	f800283a 	ret

14d80a58 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
14d80a58:	20800237 	ldwio	r2,8(r4)
}
14d80a5c:	1144703a 	and	r2,r2,r5
14d80a60:	f800283a 	ret

14d80a64 <altera_avalon_fifo_read_level>:
14d80a64:	20800037 	ldwio	r2,0(r4)
14d80a68:	f800283a 	ret

14d80a6c <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
14d80a6c:	21000204 	addi	r4,r4,8
14d80a70:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
14d80a74:	20800037 	ldwio	r2,0(r4)
14d80a78:	114a703a 	and	r5,r2,r5
14d80a7c:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
14d80a80:	0085c83a 	sub	r2,zero,r2
14d80a84:	f800283a 	ret

14d80a88 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
14d80a88:	21000304 	addi	r4,r4,12
14d80a8c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
14d80a90:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
14d80a94:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
14d80a98:	28c00126 	beq	r5,r3,14d80aa0 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
14d80a9c:	00bfff84 	movi	r2,-2
}
14d80aa0:	f800283a 	ret

14d80aa4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
14d80aa4:	21000404 	addi	r4,r4,16
14d80aa8:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
14d80aac:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
14d80ab0:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
14d80ab4:	28c00126 	beq	r5,r3,14d80abc <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
14d80ab8:	00bfff44 	movi	r2,-3
}
14d80abc:	f800283a 	ret

14d80ac0 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
14d80ac0:	21000504 	addi	r4,r4,20
14d80ac4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
14d80ac8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
14d80acc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
14d80ad0:	28c00126 	beq	r5,r3,14d80ad8 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
14d80ad4:	00bfff44 	movi	r2,-3
}
14d80ad8:	f800283a 	ret

14d80adc <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
14d80adc:	defffb04 	addi	sp,sp,-20
14d80ae0:	dcc00315 	stw	r19,12(sp)
14d80ae4:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
14d80ae8:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
14d80aec:	dc800215 	stw	r18,8(sp)
14d80af0:	dc400115 	stw	r17,4(sp)
14d80af4:	dc000015 	stw	r16,0(sp)
14d80af8:	dfc00415 	stw	ra,16(sp)
14d80afc:	2021883a 	mov	r16,r4
14d80b00:	3023883a 	mov	r17,r6
14d80b04:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
14d80b08:	4d80a6c0 	call	14d80a6c <altera_avalon_fifo_clear_event>
14d80b0c:	10000f1e 	bne	r2,zero,14d80b4c <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
14d80b10:	980b883a 	mov	r5,r19
14d80b14:	8009883a 	mov	r4,r16
14d80b18:	4d80a880 	call	14d80a88 <altera_avalon_fifo_write_ienable>
14d80b1c:	10000d1e 	bne	r2,zero,14d80b54 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
14d80b20:	900b883a 	mov	r5,r18
14d80b24:	8009883a 	mov	r4,r16
14d80b28:	4d80aa40 	call	14d80aa4 <altera_avalon_fifo_write_almostfull>
14d80b2c:	10000226 	beq	r2,zero,14d80b38 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
14d80b30:	00bfff44 	movi	r2,-3
14d80b34:	00000806 	br	14d80b58 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
14d80b38:	880b883a 	mov	r5,r17
14d80b3c:	8009883a 	mov	r4,r16
14d80b40:	4d80ac00 	call	14d80ac0 <altera_avalon_fifo_write_almostempty>
14d80b44:	10000426 	beq	r2,zero,14d80b58 <altera_avalon_fifo_init+0x7c>
14d80b48:	003ff906 	br	14d80b30 <__alt_mem_shared_ocm+0xf4d7fb30>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
14d80b4c:	00bfffc4 	movi	r2,-1
14d80b50:	00000106 	br	14d80b58 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
14d80b54:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
14d80b58:	dfc00417 	ldw	ra,16(sp)
14d80b5c:	dcc00317 	ldw	r19,12(sp)
14d80b60:	dc800217 	ldw	r18,8(sp)
14d80b64:	dc400117 	ldw	r17,4(sp)
14d80b68:	dc000017 	ldw	r16,0(sp)
14d80b6c:	dec00504 	addi	sp,sp,20
14d80b70:	f800283a 	ret

14d80b74 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
14d80b74:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
14d80b78:	1080004c 	andi	r2,r2,1
14d80b7c:	1000021e 	bne	r2,zero,14d80b88 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
14d80b80:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
14d80b84:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
14d80b88:	00bfff04 	movi	r2,-4
    }
}
14d80b8c:	f800283a 	ret

14d80b90 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
14d80b90:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
14d80b94:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
14d80b98:	1080008c 	andi	r2,r2,2
14d80b9c:	1000041e 	bne	r2,zero,14d80bb0 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
14d80ba0:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
14d80ba4:	20c00037 	ldwio	r3,0(r4)
14d80ba8:	30c00015 	stw	r3,0(r6)
14d80bac:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
14d80bb0:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
14d80bb4:	f800283a 	ret

14d80bb8 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
14d80bb8:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
14d80bbc:	1080008c 	andi	r2,r2,2
14d80bc0:	1000021e 	bne	r2,zero,14d80bcc <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
14d80bc4:	20800037 	ldwio	r2,0(r4)
14d80bc8:	f800283a 	ret
    }
    return 0;
14d80bcc:	0005883a 	mov	r2,zero
}
14d80bd0:	f800283a 	ret

14d80bd4 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
14d80bd4:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
14d80bd8:	1080004c 	andi	r2,r2,1
14d80bdc:	1000021e 	bne	r2,zero,14d80be8 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
14d80be0:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
14d80be4:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
14d80be8:	00bfff04 	movi	r2,-4
    }
}
14d80bec:	f800283a 	ret

14d80bf0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
14d80bf0:	20800137 	ldwio	r2,4(r4)
14d80bf4:	f800283a 	ret

14d80bf8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
14d80bf8:	20800037 	ldwio	r2,0(r4)
14d80bfc:	f800283a 	ret

14d80c00 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
14d80c00:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
14d80c04:	d1600a04 	addi	r5,gp,-32728
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
14d80c08:	dc000015 	stw	r16,0(sp)
14d80c0c:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
14d80c10:	4d80df00 	call	14d80df0 <alt_find_dev>
14d80c14:	1021883a 	mov	r16,r2

  if (NULL == dev)
14d80c18:	1000071e 	bne	r2,zero,14d80c38 <altera_avalon_mutex_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
14d80c1c:	d0a00c17 	ldw	r2,-32720(gp)
14d80c20:	10000226 	beq	r2,zero,14d80c2c <altera_avalon_mutex_open+0x2c>
14d80c24:	103ee83a 	callr	r2
14d80c28:	00000106 	br	14d80c30 <altera_avalon_mutex_open+0x30>
14d80c2c:	d0a02204 	addi	r2,gp,-32632
  {
    ALT_ERRNO = ENODEV;
14d80c30:	00c004c4 	movi	r3,19
14d80c34:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
14d80c38:	8005883a 	mov	r2,r16
14d80c3c:	dfc00117 	ldw	ra,4(sp)
14d80c40:	dc000017 	ldw	r16,0(sp)
14d80c44:	dec00204 	addi	sp,sp,8
14d80c48:	f800283a 	ret

14d80c4c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
14d80c4c:	f800283a 	ret

14d80c50 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
14d80c50:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
14d80c54:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
14d80c58:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
14d80c5c:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
14d80c60:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
14d80c64:	20c00317 	ldw	r3,12(r4)
14d80c68:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
14d80c6c:	10fff81e 	bne	r2,r3,14d80c50 <__alt_mem_shared_ocm+0xf4d7fc50>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
14d80c70:	f800283a 	ret

14d80c74 <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
14d80c74:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
14d80c78:	1004943a 	slli	r2,r2,16
14d80c7c:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
14d80c80:	20800317 	ldw	r2,12(r4)
14d80c84:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
14d80c88:	20800317 	ldw	r2,12(r4)
14d80c8c:	10800037 	ldwio	r2,0(r2)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
14d80c90:	1144c03a 	cmpne	r2,r2,r5
}
14d80c94:	0085c83a 	sub	r2,zero,r2
14d80c98:	f800283a 	ret

14d80c9c <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
14d80c9c:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
14d80ca0:	20c00317 	ldw	r3,12(r4)
14d80ca4:	01400044 	movi	r5,1
14d80ca8:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
14d80cac:	1004943a 	slli	r2,r2,16
14d80cb0:	20c00317 	ldw	r3,12(r4)
14d80cb4:	18800035 	stwio	r2,0(r3)
14d80cb8:	f800283a 	ret

14d80cbc <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
14d80cbc:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
14d80cc0:	20800317 	ldw	r2,12(r4)
14d80cc4:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
14d80cc8:	1006d43a 	srli	r3,r2,16
14d80ccc:	28c0031e 	bne	r5,r3,14d80cdc <altera_avalon_mutex_is_mine+0x20>
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
14d80cd0:	10bfffcc 	andi	r2,r2,65535
14d80cd4:	1004c03a 	cmpne	r2,r2,zero
14d80cd8:	f800283a 	ret
14d80cdc:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
14d80ce0:	f800283a 	ret

14d80ce4 <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
14d80ce4:	20800317 	ldw	r2,12(r4)
14d80ce8:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
14d80cec:	1080004c 	andi	r2,r2,1
14d80cf0:	f800283a 	ret

14d80cf4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
14d80cf4:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
14d80cf8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
14d80cfc:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
14d80d00:	dc000015 	stw	r16,0(sp)
14d80d04:	dfc00115 	stw	ra,4(sp)
14d80d08:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
14d80d0c:	4d80ff40 	call	14d80ff4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
14d80d10:	10000e26 	beq	r2,zero,14d80d4c <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
14d80d14:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
14d80d18:	013f07f4 	movhi	r4,64543
14d80d1c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
14d80d20:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
14d80d24:	2101f084 	addi	r4,r4,1986
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
14d80d28:	297fffc4 	addi	r5,r5,-1
14d80d2c:	283ffe1e 	bne	r5,zero,14d80d28 <__alt_mem_shared_ocm+0xf4d7fd28>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
14d80d30:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
14d80d34:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
14d80d38:	18bffb16 	blt	r3,r2,14d80d28 <__alt_mem_shared_ocm+0xf4d7fd28>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
14d80d3c:	84000864 	muli	r16,r16,33
14d80d40:	843fffc4 	addi	r16,r16,-1
14d80d44:	803ffe1e 	bne	r16,zero,14d80d40 <__alt_mem_shared_ocm+0xf4d7fd40>
14d80d48:	00000306 	br	14d80d58 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
14d80d4c:	84000864 	muli	r16,r16,33
14d80d50:	843fffc4 	addi	r16,r16,-1
14d80d54:	043ffe16 	blt	zero,r16,14d80d50 <__alt_mem_shared_ocm+0xf4d7fd50>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
14d80d58:	0005883a 	mov	r2,zero
14d80d5c:	dfc00117 	ldw	ra,4(sp)
14d80d60:	dc000017 	ldw	r16,0(sp)
14d80d64:	dec00204 	addi	sp,sp,8
14d80d68:	f800283a 	ret

14d80d6c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
14d80d6c:	0005883a 	mov	r2,zero
14d80d70:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
14d80d74:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
14d80d78:	10800804 	addi	r2,r2,32
14d80d7c:	10fffd1e 	bne	r2,r3,14d80d74 <__alt_mem_shared_ocm+0xf4d7fd74>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
14d80d80:	f800283a 	ret

14d80d84 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
14d80d84:	20000226 	beq	r4,zero,14d80d90 <alt_dev_llist_insert+0xc>
14d80d88:	20800217 	ldw	r2,8(r4)
14d80d8c:	1000101e 	bne	r2,zero,14d80dd0 <alt_dev_llist_insert+0x4c>
14d80d90:	d0a00c17 	ldw	r2,-32720(gp)
14d80d94:	10000926 	beq	r2,zero,14d80dbc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
14d80d98:	deffff04 	addi	sp,sp,-4
14d80d9c:	dfc00015 	stw	ra,0(sp)
14d80da0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
14d80da4:	00c00584 	movi	r3,22
14d80da8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
14d80dac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
14d80db0:	dfc00017 	ldw	ra,0(sp)
14d80db4:	dec00104 	addi	sp,sp,4
14d80db8:	f800283a 	ret
14d80dbc:	d0a02204 	addi	r2,gp,-32632
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
14d80dc0:	00c00584 	movi	r3,22
14d80dc4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
14d80dc8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
14d80dcc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
14d80dd0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
14d80dd4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
14d80dd8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
14d80ddc:	28800017 	ldw	r2,0(r5)
14d80de0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
14d80de4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
14d80de8:	0005883a 	mov	r2,zero
14d80dec:	f800283a 	ret

14d80df0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
14d80df0:	defffb04 	addi	sp,sp,-20
14d80df4:	dcc00315 	stw	r19,12(sp)
14d80df8:	dc800215 	stw	r18,8(sp)
14d80dfc:	dc400115 	stw	r17,4(sp)
14d80e00:	dc000015 	stw	r16,0(sp)
14d80e04:	dfc00415 	stw	ra,16(sp)
14d80e08:	2027883a 	mov	r19,r4
14d80e0c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
14d80e10:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
14d80e14:	4d80ee00 	call	14d80ee0 <strlen>
14d80e18:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
14d80e1c:	84400726 	beq	r16,r17,14d80e3c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
14d80e20:	81000217 	ldw	r4,8(r16)
14d80e24:	900d883a 	mov	r6,r18
14d80e28:	980b883a 	mov	r5,r19
14d80e2c:	4d80eb00 	call	14d80eb0 <memcmp>
14d80e30:	10000426 	beq	r2,zero,14d80e44 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
14d80e34:	84000017 	ldw	r16,0(r16)
14d80e38:	003ff806 	br	14d80e1c <__alt_mem_shared_ocm+0xf4d7fe1c>
  }
  
  /* No match found */
  
  return NULL;
14d80e3c:	0005883a 	mov	r2,zero
14d80e40:	00000106 	br	14d80e48 <alt_find_dev+0x58>
14d80e44:	8005883a 	mov	r2,r16
}
14d80e48:	dfc00417 	ldw	ra,16(sp)
14d80e4c:	dcc00317 	ldw	r19,12(sp)
14d80e50:	dc800217 	ldw	r18,8(sp)
14d80e54:	dc400117 	ldw	r17,4(sp)
14d80e58:	dc000017 	ldw	r16,0(sp)
14d80e5c:	dec00504 	addi	sp,sp,20
14d80e60:	f800283a 	ret

14d80e64 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
14d80e64:	01420004 	movi	r5,2048
14d80e68:	0009883a 	mov	r4,zero
14d80e6c:	4d80e781 	jmpi	14d80e78 <alt_icache_flush>

14d80e70 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
14d80e70:	000170fa 	wrctl	ienable,zero
14d80e74:	f800283a 	ret

14d80e78 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
14d80e78:	00820004 	movi	r2,2048
14d80e7c:	1140012e 	bgeu	r2,r5,14d80e84 <alt_icache_flush+0xc>
14d80e80:	100b883a 	mov	r5,r2
14d80e84:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
14d80e88:	2005883a 	mov	r2,r4
14d80e8c:	1140032e 	bgeu	r2,r5,14d80e9c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
14d80e90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
14d80e94:	10800804 	addi	r2,r2,32
14d80e98:	003ffc06 	br	14d80e8c <__alt_mem_shared_ocm+0xf4d7fe8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
14d80e9c:	210007cc 	andi	r4,r4,31
14d80ea0:	20000126 	beq	r4,zero,14d80ea8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
14d80ea4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
14d80ea8:	0000203a 	flushp
14d80eac:	f800283a 	ret

14d80eb0 <memcmp>:
14d80eb0:	218d883a 	add	r6,r4,r6
14d80eb4:	21800826 	beq	r4,r6,14d80ed8 <memcmp+0x28>
14d80eb8:	20800003 	ldbu	r2,0(r4)
14d80ebc:	28c00003 	ldbu	r3,0(r5)
14d80ec0:	10c00226 	beq	r2,r3,14d80ecc <memcmp+0x1c>
14d80ec4:	10c5c83a 	sub	r2,r2,r3
14d80ec8:	f800283a 	ret
14d80ecc:	21000044 	addi	r4,r4,1
14d80ed0:	29400044 	addi	r5,r5,1
14d80ed4:	003ff706 	br	14d80eb4 <__alt_mem_shared_ocm+0xf4d7feb4>
14d80ed8:	0005883a 	mov	r2,zero
14d80edc:	f800283a 	ret

14d80ee0 <strlen>:
14d80ee0:	2005883a 	mov	r2,r4
14d80ee4:	10c00007 	ldb	r3,0(r2)
14d80ee8:	18000226 	beq	r3,zero,14d80ef4 <strlen+0x14>
14d80eec:	10800044 	addi	r2,r2,1
14d80ef0:	003ffc06 	br	14d80ee4 <__alt_mem_shared_ocm+0xf4d7fee4>
14d80ef4:	1105c83a 	sub	r2,r2,r4
14d80ef8:	f800283a 	ret

14d80efc <__divsi3>:
14d80efc:	20001b16 	blt	r4,zero,14d80f6c <__divsi3+0x70>
14d80f00:	000f883a 	mov	r7,zero
14d80f04:	28001616 	blt	r5,zero,14d80f60 <__divsi3+0x64>
14d80f08:	200d883a 	mov	r6,r4
14d80f0c:	29001a2e 	bgeu	r5,r4,14d80f78 <__divsi3+0x7c>
14d80f10:	00800804 	movi	r2,32
14d80f14:	00c00044 	movi	r3,1
14d80f18:	00000106 	br	14d80f20 <__divsi3+0x24>
14d80f1c:	10000d26 	beq	r2,zero,14d80f54 <__divsi3+0x58>
14d80f20:	294b883a 	add	r5,r5,r5
14d80f24:	10bfffc4 	addi	r2,r2,-1
14d80f28:	18c7883a 	add	r3,r3,r3
14d80f2c:	293ffb36 	bltu	r5,r4,14d80f1c <__alt_mem_shared_ocm+0xf4d7ff1c>
14d80f30:	0005883a 	mov	r2,zero
14d80f34:	18000726 	beq	r3,zero,14d80f54 <__divsi3+0x58>
14d80f38:	0005883a 	mov	r2,zero
14d80f3c:	31400236 	bltu	r6,r5,14d80f48 <__divsi3+0x4c>
14d80f40:	314dc83a 	sub	r6,r6,r5
14d80f44:	10c4b03a 	or	r2,r2,r3
14d80f48:	1806d07a 	srli	r3,r3,1
14d80f4c:	280ad07a 	srli	r5,r5,1
14d80f50:	183ffa1e 	bne	r3,zero,14d80f3c <__alt_mem_shared_ocm+0xf4d7ff3c>
14d80f54:	38000126 	beq	r7,zero,14d80f5c <__divsi3+0x60>
14d80f58:	0085c83a 	sub	r2,zero,r2
14d80f5c:	f800283a 	ret
14d80f60:	014bc83a 	sub	r5,zero,r5
14d80f64:	39c0005c 	xori	r7,r7,1
14d80f68:	003fe706 	br	14d80f08 <__alt_mem_shared_ocm+0xf4d7ff08>
14d80f6c:	0109c83a 	sub	r4,zero,r4
14d80f70:	01c00044 	movi	r7,1
14d80f74:	003fe306 	br	14d80f04 <__alt_mem_shared_ocm+0xf4d7ff04>
14d80f78:	00c00044 	movi	r3,1
14d80f7c:	003fee06 	br	14d80f38 <__alt_mem_shared_ocm+0xf4d7ff38>

14d80f80 <__modsi3>:
14d80f80:	20001716 	blt	r4,zero,14d80fe0 <__modsi3+0x60>
14d80f84:	000f883a 	mov	r7,zero
14d80f88:	2005883a 	mov	r2,r4
14d80f8c:	28001216 	blt	r5,zero,14d80fd8 <__modsi3+0x58>
14d80f90:	2900162e 	bgeu	r5,r4,14d80fec <__modsi3+0x6c>
14d80f94:	01800804 	movi	r6,32
14d80f98:	00c00044 	movi	r3,1
14d80f9c:	00000106 	br	14d80fa4 <__modsi3+0x24>
14d80fa0:	30000a26 	beq	r6,zero,14d80fcc <__modsi3+0x4c>
14d80fa4:	294b883a 	add	r5,r5,r5
14d80fa8:	31bfffc4 	addi	r6,r6,-1
14d80fac:	18c7883a 	add	r3,r3,r3
14d80fb0:	293ffb36 	bltu	r5,r4,14d80fa0 <__alt_mem_shared_ocm+0xf4d7ffa0>
14d80fb4:	18000526 	beq	r3,zero,14d80fcc <__modsi3+0x4c>
14d80fb8:	1806d07a 	srli	r3,r3,1
14d80fbc:	11400136 	bltu	r2,r5,14d80fc4 <__modsi3+0x44>
14d80fc0:	1145c83a 	sub	r2,r2,r5
14d80fc4:	280ad07a 	srli	r5,r5,1
14d80fc8:	183ffb1e 	bne	r3,zero,14d80fb8 <__alt_mem_shared_ocm+0xf4d7ffb8>
14d80fcc:	38000126 	beq	r7,zero,14d80fd4 <__modsi3+0x54>
14d80fd0:	0085c83a 	sub	r2,zero,r2
14d80fd4:	f800283a 	ret
14d80fd8:	014bc83a 	sub	r5,zero,r5
14d80fdc:	003fec06 	br	14d80f90 <__alt_mem_shared_ocm+0xf4d7ff90>
14d80fe0:	0109c83a 	sub	r4,zero,r4
14d80fe4:	01c00044 	movi	r7,1
14d80fe8:	003fe706 	br	14d80f88 <__alt_mem_shared_ocm+0xf4d7ff88>
14d80fec:	00c00044 	movi	r3,1
14d80ff0:	003ff106 	br	14d80fb8 <__alt_mem_shared_ocm+0xf4d7ffb8>

14d80ff4 <__udivsi3>:
14d80ff4:	200d883a 	mov	r6,r4
14d80ff8:	2900152e 	bgeu	r5,r4,14d81050 <__udivsi3+0x5c>
14d80ffc:	28001416 	blt	r5,zero,14d81050 <__udivsi3+0x5c>
14d81000:	00800804 	movi	r2,32
14d81004:	00c00044 	movi	r3,1
14d81008:	00000206 	br	14d81014 <__udivsi3+0x20>
14d8100c:	10000e26 	beq	r2,zero,14d81048 <__udivsi3+0x54>
14d81010:	28000516 	blt	r5,zero,14d81028 <__udivsi3+0x34>
14d81014:	294b883a 	add	r5,r5,r5
14d81018:	10bfffc4 	addi	r2,r2,-1
14d8101c:	18c7883a 	add	r3,r3,r3
14d81020:	293ffa36 	bltu	r5,r4,14d8100c <__alt_mem_shared_ocm+0xf4d8000c>
14d81024:	18000826 	beq	r3,zero,14d81048 <__udivsi3+0x54>
14d81028:	0005883a 	mov	r2,zero
14d8102c:	31400236 	bltu	r6,r5,14d81038 <__udivsi3+0x44>
14d81030:	314dc83a 	sub	r6,r6,r5
14d81034:	10c4b03a 	or	r2,r2,r3
14d81038:	1806d07a 	srli	r3,r3,1
14d8103c:	280ad07a 	srli	r5,r5,1
14d81040:	183ffa1e 	bne	r3,zero,14d8102c <__alt_mem_shared_ocm+0xf4d8002c>
14d81044:	f800283a 	ret
14d81048:	0005883a 	mov	r2,zero
14d8104c:	f800283a 	ret
14d81050:	00c00044 	movi	r3,1
14d81054:	003ff406 	br	14d81028 <__alt_mem_shared_ocm+0xf4d80028>

14d81058 <__umodsi3>:
14d81058:	2005883a 	mov	r2,r4
14d8105c:	2900122e 	bgeu	r5,r4,14d810a8 <__umodsi3+0x50>
14d81060:	28001116 	blt	r5,zero,14d810a8 <__umodsi3+0x50>
14d81064:	01800804 	movi	r6,32
14d81068:	00c00044 	movi	r3,1
14d8106c:	00000206 	br	14d81078 <__umodsi3+0x20>
14d81070:	30000c26 	beq	r6,zero,14d810a4 <__umodsi3+0x4c>
14d81074:	28000516 	blt	r5,zero,14d8108c <__umodsi3+0x34>
14d81078:	294b883a 	add	r5,r5,r5
14d8107c:	31bfffc4 	addi	r6,r6,-1
14d81080:	18c7883a 	add	r3,r3,r3
14d81084:	293ffa36 	bltu	r5,r4,14d81070 <__alt_mem_shared_ocm+0xf4d80070>
14d81088:	18000626 	beq	r3,zero,14d810a4 <__umodsi3+0x4c>
14d8108c:	1806d07a 	srli	r3,r3,1
14d81090:	11400136 	bltu	r2,r5,14d81098 <__umodsi3+0x40>
14d81094:	1145c83a 	sub	r2,r2,r5
14d81098:	280ad07a 	srli	r5,r5,1
14d8109c:	183ffb1e 	bne	r3,zero,14d8108c <__alt_mem_shared_ocm+0xf4d8008c>
14d810a0:	f800283a 	ret
14d810a4:	f800283a 	ret
14d810a8:	00c00044 	movi	r3,1
14d810ac:	003ff706 	br	14d8108c <__alt_mem_shared_ocm+0xf4d8008c>
